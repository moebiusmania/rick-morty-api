{"version":3,"sources":["utils/index.js","components/Card/index.js","components/List/index.js","utils/http.js","App.js","reportWebVitals.js","index.js"],"names":["statusBadge","status","classes","push","join","Card","props","item","data","className","src","image","alt","name","class","location","origin","species","gender","mock","count","pages","next","prev","List","useState","pag","setPag","items","setItems","getData","endpoint","fetch","then","r","json","http","info","results","navigate","direction","useEffect","window","scrollTo","top","behavior","map","e","id","role","aria-label","type","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAAMA,EAAc,SAACC,GACnB,IAAMC,EAAU,CAAC,SACjB,OAAQD,GACN,QACA,IAAK,QACHC,EAAQC,KAAK,cACb,MACF,IAAK,OACHD,EAAQC,KAAK,aACb,MACF,IAAK,UACHD,EAAQC,KAAK,gBAGjB,OAAOD,EAAQE,KAAK,M,OCWPC,EAtBF,SAACC,GACZ,IAAMC,EAAOD,EAAME,MAAQ,GAE3B,OACE,sBAAKC,UAAU,OAAf,UACE,qBAAKC,IAAKH,EAAKI,MAAOF,UAAU,eAAeG,IAAKL,EAAKM,OACzD,sBAAKJ,UAAU,YAAf,UACE,oBAAIA,UAAU,aAAd,SAA4BF,EAAKM,OACjC,sBAAMJ,UAAWT,EAAYO,EAAKN,QAAlC,SAA4CM,EAAKN,SACjD,mBAAGQ,UAAU,YAAb,SACE,qBAAIK,MAAM,gBAAV,UACE,+BAAI,+CAAJ,IAAgCP,EAAKQ,SAASF,QAC9C,+BAAI,6CAAJ,IAA8BN,EAAKS,OAAOH,QAC1C,+BAAI,8CAAJ,IAA+BN,EAAKU,WACpC,+BAAI,6CAAJ,IAA8BV,EAAKW,sBCXzCC,EACQ,CACVC,MAAO,EACPC,MAAO,EACPC,KAAM,GACNC,KAAM,IA8CKC,EA1CF,WACX,IACA,EAAsBC,mBAASN,GAA/B,mBAAOO,EAAP,KAAYC,EAAZ,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAU,SAACC,GAAD,OCnBL,kBACXC,MADW,uDAAO,GAAP,uDAAoB,IACZC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UDkBDC,CAAKL,GAAUE,MAAK,SAAAzB,GAChDmB,EAAOnB,EAAK6B,MACZR,EAASrB,EAAK8B,aAGVC,EAAW,SAACC,GAAD,OACfV,EAD4C,SAAdU,EACtBd,EAAIJ,KAAgBI,EAAIH,OAUlC,OARAkB,qBAAU,kBACRC,OAAOC,SAAS,CAAEC,IAAK,EAAGC,SAAU,aACpC,CAACnB,IAEHe,qBAAU,WACRX,EAjBU,+CAkBT,IAGD,qCACE,oBAAIrB,UAAU,sBAAd,SACGmB,EAAMkB,KAAI,SAAAC,GAAC,OAAI,6BAAe,cAAC,EAAD,CAAMvC,KAAMuC,KAAlBA,EAAEC,SAG7B,sBAAKvC,UAAU,uBAAuBwC,KAAK,aAAaC,aAAW,aAAnE,UACGxB,EAAIH,KACH,wBAAQ4B,KAAK,SAAS1C,UAAU,0BAA0B2C,QAAS,kBAAMb,EAAS,SAAlF,uBACA,KAEDb,EAAIJ,KACH,wBAAQ6B,KAAK,SAAS1C,UAAU,0BAA0B2C,QAAS,kBAAMb,EAAS,SAAlF,uBACA,QAGJ,wCAAU,iCAASb,EAAIN,QAAvB,aAAgD,iCAASM,EAAIL,QAA7D,gBEvCSgC,MATf,WACE,OACE,sBAAK5C,UAAU,gBAAf,UACE,2DACA,cAAC,EAAD,QCIS6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvB,MAAK,YAAkD,IAA/CwB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.bb310b85.chunk.js","sourcesContent":["const statusBadge = (status) => {\n  const classes = ['badge'];\n  switch (status) {\n    default:\n    case 'Alive':\n      classes.push('bg-success');\n      break;\n    case 'Dead':\n      classes.push('bg-danger');\n      break;\n    case 'unknown':\n      classes.push('bg-secondary');\n      break;\n  }\n  return classes.join(' ');\n}\n\nexport {\n  statusBadge\n}","\nimport { statusBadge } from './../../utils';\n\nconst Card = (props) => {\n  const item = props.data || {};\n\n  return (\n    <div className=\"card\">\n      <img src={item.image} className=\"card-img-top\" alt={item.name} />\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">{item.name}</h5>\n        <span className={statusBadge(item.status)}>{item.status}</span>\n        <p className=\"card-text\">\n          <ul class=\"list-unstyled\">\n            <li><strong>Location:</strong> {item.location.name}</li>\n            <li><strong>Origin:</strong> {item.origin.name}</li>\n            <li><strong>Species:</strong> {item.species}</li>\n            <li><strong>Gender:</strong> {item.gender}</li>\n          </ul>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;","\nimport { useState, useEffect } from 'react';\n\nimport Card from './../Card';\nimport { http } from './../../utils/http';\n\nconst mock = {\n  pagination: {\n    count: 0,\n    pages: 0,\n    next: '',\n    prev: ''\n  }\n}\n\nconst List = () => {\n  const URL = 'https://rickandmortyapi.com/api/character'\n  const [pag, setPag] = useState(mock.pagination);\n  const [items, setItems] = useState([]);\n\n  const getData = (endpoint) => http(endpoint).then(data => {\n    setPag(data.info);\n    setItems(data.results);\n  });\n\n  const navigate = (direction) => direction === 'next' ?\n    getData(pag.next) : getData(pag.prev);\n\n  useEffect(() => \n    window.scrollTo({ top: 0, behavior: 'smooth' })\n  , [pag]);\n\n  useEffect(() => {\n    getData(URL);\n  }, []);\n\n  return (\n    <>\n      <ul className=\"list-unstyled cards\">\n        {items.map(e => <li key={e.id}><Card data={e} /></li>)}\n      </ul>\n      \n      <div className=\"btn-group navigation\" role=\"navigation\" aria-label=\"navigation\">\n        {pag.prev ? \n          <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => navigate('prev')}>&laquo; Prev</button> \n        : null }\n\n        {pag.next ? \n          <button type=\"button\" className=\"btn btn-outline-primary\" onClick={() => navigate('next')}>Next &raquo;</button> \n        : null }\n      </div>\n\n      <p>Total: <strong>{pag.count}</strong> items in <strong>{pag.pages}</strong> pages</p>\n    </>\n  )\n}\n\nexport default List;","\nconst http = (url = '', params = {}) => \n  fetch(url, params).then(r => r.json()); \n\nexport {\n  http\n}","import './App.scss';\n\nimport List from './components/List';\n\nfunction App() {\n  return (\n    <div className=\"container app\">\n      <h1>Rick & Morty API homework</h1>\n      <List />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}